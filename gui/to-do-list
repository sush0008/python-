import tkinter as tk
from tkinter import messagebox, simpledialog
from tkcalendar import DateEntry
from PIL import Image, ImageTk, ImageDraw
import json
import os

# ----------------- File Storage -----------------
TASKS_FILE = "tasks.json"

def load_tasks():
    if os.path.exists(TASKS_FILE):
        with open(TASKS_FILE, "r") as f:
            return json.load(f)
    return []

def save_tasks():
    with open(TASKS_FILE, "w") as f:
        json.dump(tasks, f, indent=4)

# ----------------- Functions -----------------
def add_task():
    task_text = task_entry.get()
    task_priority = priority_var.get()
    task_due = due_date.get_date().strftime("%Y-%m-%d")
    if task_text.strip() == "":
        messagebox.showwarning("Warning", "Task cannot be empty!")
        return
    tasks.append({"task": task_text, "priority": task_priority, "due": task_due, "completed": False})
    update_listbox()
    task_entry.delete(0, tk.END)
    save_tasks()

def delete_task():
    selected_index = tasks_listbox.curselection()
    if not selected_index:
        messagebox.showwarning("Warning", "Select a task to delete!")
        return
    tasks.pop(selected_index[0])
    update_listbox()
    save_tasks()

def edit_task():
    selected_index = tasks_listbox.curselection()
    if not selected_index:
        messagebox.showwarning("Warning", "Select a task to edit!")
        return
    index = selected_index[0]
    task_text = simpledialog.askstring("Edit Task", "Enter new task:", initialvalue=tasks[index]["task"])
    if task_text:
        tasks[index]["task"] = task_text
        update_listbox()
        save_tasks()

def toggle_complete(event):
    index = tasks_listbox.curselection()[0]
    tasks[index]["completed"] = not tasks[index]["completed"]
    update_listbox()
    save_tasks()

def clear_tasks():
    tasks.clear()
    update_listbox()
    save_tasks()

def update_listbox(filtered_tasks=None):
    tasks_listbox.delete(0, tk.END)
    display_tasks = filtered_tasks if filtered_tasks is not None else tasks
    for t in display_tasks:
        display_text = f"{t['task']} [{t['priority']}] Due:{t['due']}"
        tasks_listbox.insert(tk.END, display_text)
        # Color coding
        if t["completed"]:
            tasks_listbox.itemconfig(tk.END, fg="gray")
        elif t["priority"] == "High":
            tasks_listbox.itemconfig(tk.END, fg="#e74c3c")  # red
        elif t["priority"] == "Medium":
            tasks_listbox.itemconfig(tk.END, fg="#f39c12")  # orange
        else:
            tasks_listbox.itemconfig(tk.END, fg="#2ecc71")  # green

def filter_tasks():
    keyword = search_entry.get().lower()
    priority = filter_var.get()
    filtered = []
    for t in tasks:
        if keyword in t["task"].lower() and (priority=="All" or t["priority"]==priority):
            filtered.append(t)
    update_listbox(filtered)

def sort_tasks():
    sort_type = sort_var.get()
    if sort_type == "Priority":
        priority_order = {"High": 1, "Medium": 2, "Low": 3}
        tasks.sort(key=lambda x: priority_order[x["priority"]])
    elif sort_type == "Completion":
        tasks.sort(key=lambda x: x["completed"])
    update_listbox()

# ----------------- GUI Setup -----------------
root = tk.Tk()
root.title("Modern ToDo App")
root.geometry("700x650")
root.resizable(False, False)

# ----------------- Gradient Background -----------------
gradient = Image.new('RGB', (700, 650), "#ffffff")
draw = ImageDraw.Draw(gradient)
for i in range(650):
    r = int(135 + (255-135) * (i/650))  # gradient from light blue to white
    g = int(206 + (255-206) * (i/650))
    b = int(250 + (255-250) * (i/650))
    draw.line([(0,i),(700,i)], fill=(r,g,b))
bg_photo = ImageTk.PhotoImage(gradient)
bg_label = tk.Label(root, image=bg_photo)
bg_label.place(x=0, y=0, relwidth=1, relheight=1)

# ----------------- Widgets -----------------
title_label = tk.Label(root, text="Modern ToDo List", font=("Helvetica", 24, "bold"), bg="#ffffff", fg="#34495e")
title_label.pack(pady=10)

task_entry = tk.Entry(root, width=40, font=("Helvetica", 14), bd=0, highlightthickness=2, highlightbackground="#3498db")
task_entry.pack(pady=5)

priority_var = tk.StringVar(value="Low")
priority_menu = tk.OptionMenu(root, priority_var, "High", "Medium", "Low")
priority_menu.config(bg="#ecf0f1", fg="#34495e", width=10, relief="flat")
priority_menu.pack(pady=5)

due_date = DateEntry(root, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')
due_date.pack(pady=5)

button_frame = tk.Frame(root, bg="#ffffff")
button_frame.pack(pady=10)
btn_style = {"bg":"#3498db", "fg":"white", "bd":0, "width":12, "font":("Helvetica",10,"bold"), "activebackground":"#2980b9"}
tk.Button(button_frame, text="Add Task", command=add_task, **btn_style).grid(row=0,column=0,padx=5)
tk.Button(button_frame, text="Edit Task", command=edit_task, **btn_style).grid(row=0,column=1,padx=5)
tk.Button(button_frame, text="Delete Task", command=delete_task, **btn_style).grid(row=0,column=2,padx=5)
tk.Button(button_frame, text="Clear All", command=clear_tasks, **btn_style).grid(row=0,column=3,padx=5)

tasks_listbox = tk.Listbox(root, width=70, height=15, font=("Helvetica", 12), bd=0, highlightthickness=2, highlightbackground="#3498db")
tasks_listbox.pack(pady=20)
tasks_listbox.bind("<Double-1>", toggle_complete)

# Search & Filter
search_frame = tk.Frame(root, bg="#ffffff")
search_frame.pack(pady=5)
tk.Label(search_frame, text="Search:", bg="#ffffff").grid(row=0,column=0)
search_entry = tk.Entry(search_frame)
search_entry.grid(row=0,column=1,padx=5)
tk.Label(search_frame, text="Priority:", bg="#ffffff").grid(row=0,column=2)
filter_var = tk.StringVar(value="All")
filter_menu = tk.OptionMenu(search_frame, filter_var, "All","High","Medium","Low")
filter_menu.config(bg="#ecf0f1", fg="#34495e", width=10, relief="flat")
filter_menu.grid(row=0,column=3,padx=5)
tk.Button(search_frame, text="Filter", command=filter_tasks, **btn_style).grid(row=0,column=4,padx=5)

# Sort
sort_frame = tk.Frame(root, bg="#ffffff")
sort_frame.pack(pady=5)
tk.Label(sort_frame, text="Sort By:", bg="#ffffff").grid(row=0,column=0)
sort_var = tk.StringVar(value="Priority")
sort_menu = tk.OptionMenu(sort_frame, sort_var, "Priority","Completion")
sort_menu.config(bg="#ecf0f1", fg="#34495e", width=12, relief="flat")
sort_menu.grid(row=0,column=1,padx=5)
tk.Button(sort_frame, text="Sort", command=sort_tasks, **btn_style).grid(row=0,column=2,padx=5)

# ----------------- Load tasks -----------------
tasks = load_tasks()
update_listbox()

root.mainloop()
